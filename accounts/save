from django.contrib.auth import get_user_model

from rest_framework import serializers


from django.contrib.auth.models import User, Group
from rest_framework import serializers

from pugorugh import models as pugorugh_models


class UserSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True)
    def create(self, validated_data):
        user = get_user_model().objects.create(
            username=validated_data['username'],
        )
        user.set_password(validated_data['password'])
        user.save()
        return user

    class Meta:
        model = get_user_model()


class UserViewSet(viewsets.ModelViewSet):
    queryset = models.User.objects.all()
    serializer_class = serializers.UserSerializer


from django.conf import settings
from django.db.models.signals import post_save
from django.dispatch import receiver
from rest_framework.authtoken.models import Token
from rest_framework.generics import CreateAPIView
from rest_framework import permissions
from django.contrib.auth import get_user_model



from . import models, serializers


@receiver(post_save, sender=settings.AUTH_USER_MODEL)
def create_auth_token(sender, instance=None, created=False, **kwargs):
    if created:
        Token.objects.create(user=instance)


@receiver(post_save, sender=settings.AUTH_USER_MODEL)
def create_userpref(sender, **kwargs):
    user = kwargs['instance']
    if kwargs['created']:
        user_pref = models.UserPref(user=user)
        user_pref.save()


class UserRegisterView(CreateAPIView):
    permission_classes = (permissions.AllowAny,)
    model = get_user_model()
    serializer_class = serializers.UserSerializer


from django.http import HttpResponseRedirect

from rest_framework import status
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import AllowAny
from rest_framework.response import Response

from . import serializers


VALID_USER_FIELDS = utils.get_valid_user_fields()


@api_view(['POST'])
@permission_classes((AllowAny, ))
def register(request):
    serialized = serializers.UserSerializer(data=request.POST)
    user_model = get_user_model()
    if serialized.is_valid():
        user_data = utils.get_user_data(request.POST)
        utils.create_user(**user_data)
        return Response(utils.USER_CREATED_RESPONSE_DATA,
                        status=status.HTTP_201_CREATED)
    else:
        return Response(serialized._errors, status=status.HTTP_400_BAD_REQUEST)


def create_inactive_user(username=None, email=None, password=None):
    user_model = get_user_model()
    if username is not None:
        new_user = user_model.objects.create_user(username, email, password)
    else:
        new_user = user_model.objects.create_user(email=email, password=password)
    new_user.is_active = False
    new_user.save()
    create_profile(new_user)
    site = Site.objects.get_current()
    send_activation_email(new_user, site)
    return new_user


class UserPrefViewSet(viewsets.ModelViewSet):
    queryset = models.UserPref.objects.all()
    serializer_class = serializers.UserPrefSerializer



from django.conf import settings
from django.db.models.signals import post_save
from django.dispatch import receiver
from rest_framework.authtoken.models import Token
from rest_framework.generics import CreateAPIView
from rest_framework import permissions
from django.contrib.auth import get_user_model



from . import models, serializers


@receiver(post_save, sender=settings.AUTH_USER_MODEL)
def create_auth_token(sender, instance=None, created=False, **kwargs):
    if created:
        Token.objects.create(user=instance)