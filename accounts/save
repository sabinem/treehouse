class UserProfileUpdateView(LoginRequiredMixin, SuccessMessageMixin, generic.UpdateView):
    """View for user to update their profile information."""
    model = get_user_model()
    template_name = 'accounts/profile_edit.html'
    slug_field = 'username'
    slug_url_kwarg = 'username'
    form_class = forms.ProfileUpdateForm
    second_form_class = forms.UserProfileUpdateForm
    login_url = settings.LOGIN_REDIRECT_URL

    # Allow two forms to be shown in the view
    def get_context_data(self, **kwargs):
        context = super(UserProfileUpdateView, self).get_context_data(**kwargs)
        if 'form' not in context:
            context['form'] = self.form_class(instance=self.request.user)
        if 'form2' not in context:
            context['form2'] = self.second_form_class(instance=self.request.user.userprofile)

        projects = Project.objects.all()
        context['past_projects'] = projects.filter(
            Q(owner=self.request.user) & Q(complete=True)
        )
        return context

    # Make sure both models are saved on POST request
    def post(self, request, *args, **kwargs):
        self.object = self.get_object()
        form = self.form_class(data=request.POST, instance=request.user)
        form2 = self.second_form_class(
            data=request.POST,
            instance=request.user.userprofile,
            files=request.FILES
        )

        if form.is_valid() and form2.is_valid():
            userdata = form.save(commit=False)
            userdata.save()
            profiledata = form2.save(commit=False)
            profiledata.user = userdata
            profiledata.save()
            form2.save_m2m()
            return HttpResponseRedirect(self.get_success_url())
        else:
            return self.render_to_response(
                self.get_context_data(form=form, form2=form2)
            )

    # Make sure both model instances are grabbed from the database on GET request
    def get(self, request, *args, **kwargs):
        super(UserProfileUpdateView, self).get(request, *args, **kwargs)
        form = self.form_class(instance=request.user)
        form2 = self.second_form_class(instance=request.user.userprofile)
        return self.render_to_response(
            self.get_context_data(object=self.object, form=form, form2=form2)
        )

    # URL when POST is successful
    def get_success_url(self):
        messages.success(self.request, "Your profile has been successfully updated.")
        return reverse(
            'accounts:profile',
            kwargs={'username': self.request.user.username}
        )

class BaseSkillFormSet(BaseFormSet):
    #def clean(self):
        """
        Adds validation to check that no two links have the same anchor or URL
        and that all links have both an anchor and URL.

        if any(self.errors):
            return
        skill_set = {form.cleaned_data['skill'] for form in self.forms
                     if form.cleaned_data['skill']}
        skill_list = [form.cleaned_data['skill'] for form in self.forms
                     if form.cleaned_data['skill']]
        if len(skill_list) != len(skill_set):
            raise forms.ValidationError(
                'Skills can appear only once.',
                code='duplicate_skills'
            )
        return [form.cleaned_data for form in self.forms if form.cleaned_data['skill']]
        """
        #pass

@login_required
def profile_edit_view(request):
    """
    edit profile
    """
    skills = request.user.get_skills()
    jobs = request.user.get_jobs()
    projects = request.user.get_projects()
    if request.method == 'POST':
        profile_form = forms.ProfileUpdateForm(request.POST, request.FILES, instance=request.user)
        skills_formset = forms.SkillFormSet()
        if profile_form.is_valid():
            profile_form.save()
            return HttpResponseRedirect(reverse('accounts:profile'))
        else:
            messages.error(request,
                           ('Please correct the error below.'))
    else:
        profile_form = forms.ProfileUpdateForm(instance=request.user)
        skills_formset = forms.SkillFormSet()
    print(skills_formset)
    return render(request, 'accounts/profile_edit.html', {
        'profile_form': profile_form,
        'skills_formset': skills_formset,
        'skills': skills,
        'jobs': jobs,
        'projects': projects
    })
